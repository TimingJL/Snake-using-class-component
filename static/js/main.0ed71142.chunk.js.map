{"version":3,"sources":["containers/SnakeGame/components/VirtualKeyboard/Styled.js","containers/SnakeGame/constants.js","containers/SnakeGame/components/VirtualKeyboard/index.js","containers/SnakeGame/Styled.js","containers/SnakeGame/index.js","containers/SnakeGame/selectors.js","containers/SnakeGame/actions.js","App.js","serviceWorker.js","containers/SnakeGame/reducer.js","containers/SnakeGame/epics.js","store/epics.js","store/index.js","store/configureStore.js","store/reducers.js","index.js"],"names":["StyledVirtualKeyboard","styled","div","_templateObject","INIT","concat","SET_SNAKE_MOVING","SET_SNAKE_DIRECTION","SET_SNAKE_GAME_START","SET_SNAKE_SPEED_MODIFIED","SNAKE_LIMITED_SPEED","SNAKE_DELTA_SPEED","VirtualKeyboard","_ref","handleOnClick","react_default","a","createElement","data-code","className","onClick","gameInterval","pulse","keyframes","Styled_templateObject","StyledSnakeGame","_templateObject2","selectSnakeGame","state","get","SnakeGame","handleOnKeyDown","event","handleOnSetSnakeDirection","_this","props","code","handleOnGameStartClick","_this$props","handleOnSetSnakeMoving","handleOnSetGameStart","handleOnVirtualKeyboardClick","currentTarget","getAttribute","document","addEventListener","this","removeEventListener","clearInterval","prevProps","prevState","isSpeedModified","_this$props2","snake","isGameStart","isPause","handleOnSetSpeedModified","setInterval","_this$props3","blocks","food","score","onKeyDown","map","rows","block","key","getIn","snakeBody","size","find","bodyPos","updateGameView","components_VirtualKeyboard","Component","defaultProps","Map","List","mapStateToProps","createStructuredSelector","createSelector","tictactoeState","connect","dispatch","type","directionType","payload","setSnakeDirection","setSnakeSpeedModified","App","containers_SnakeGame","GithubCorner_default","octoColor","bannerColor","href","Boolean","window","location","hostname","match","direction","x","y","createFood","Math","floor","random","defaultSnake","headPosition","body","maxLength","speed","defaultBlocks","_","range","value","indexY","indexX","id","initialState","fromJS","updatePosition","position","GAME_WIDTH","snakeGameReducer","arguments","length","undefined","action","headPositionX","headPositionY","isEatFood","updatedPositionX","updatedPositionY","eatSelf","set","updateIn","updatedBody","push","shift","dir","epics","action$","store","ofType","switchMap","Observable","empty","store_epics","Object","toConsumableArray","snakeGameEpics","epic$","BehaviorSubject","combineEpics","apply","initialEpics","epicMiddleware","createEpicMiddleware","middlewares","enhancers","applyMiddleware","composeEnhancers","compose","createStore","combineReducers","snakeGame","run","deps","mergeMap","epic","catch","err","source$","setTimeout","configureStore","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ed71142.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledVirtualKeyboard = styled.div`\n    color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 5em;\n    margin-top: 10px;\n    .virtual-keyboard__button {\n        cursor: pointer;\n        &:hover {\n            color: #ffd600;\n        }\n    }\n    .virtual-keyboard__wrapper-bottom {\n        display: flex;\n    }\n`;\n","export const KEY_REDUCER = 'SNAKE_GAME';\nexport const INIT = `${KEY_REDUCER}/INIT`;\nexport const SET_SNAKE_MOVING = `${KEY_REDUCER}/SET_SNAKE_MOVING`;\nexport const SET_SNAKE_DIRECTION = `${KEY_REDUCER}/SET_SNAKE_DIRECTION`;\nexport const SET_SNAKE_GAME_START = `${KEY_REDUCER}/SET_SNAKE_GAME_START`;\nexport const SET_SNAKE_SPEED_MODIFIED = `${KEY_REDUCER}/SET_SNAKE_SPEED_MODIFIED`;\n\nexport const GAME_WRAPPER_SIZE = 600;\nexport const GAME_WIDTH = 30;\n\nexport const SNAKE_INITIAL_SPEED = 200;\nexport const SNAKE_LIMITED_SPEED = 10;\nexport const SNAKE_DELTA_SPEED = 2;\n\nexport const ARROW_UP = 'ArrowUp';\nexport const ARROW_DOWN = 'ArrowDown';\nexport const ARROW_LEFT = 'ArrowLeft';\nexport const ARROW_RIGHT = 'ArrowRight';\nexport const SPACE = 'Space';\n\nexport const BACKGROUND_COLOR = '#1e1e1e';\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    StyledVirtualKeyboard,\n} from './Styled';\nimport {\n    ARROW_UP,\n    ARROW_DOWN,\n    ARROW_LEFT,\n    ARROW_RIGHT,\n} from 'containers/SnakeGame/constants';\n\nconst VirtualKeyboard = ({ handleOnClick }) => (\n    <StyledVirtualKeyboard>\n        <div>\n            <div data-code={ARROW_UP} className=\"virtual-keyboard__button fas fa-arrow-circle-up\" onClick={handleOnClick} />\n        </div>\n        <div className=\"virtual-keyboard__wrapper-bottom\">\n            <div data-code={ARROW_LEFT} className=\"virtual-keyboard__button fas fa-arrow-circle-left\" onClick={handleOnClick} />\n            <div data-code={ARROW_DOWN} className=\"virtual-keyboard__button fas fa-arrow-circle-down\" onClick={handleOnClick} />\n            <div data-code={ARROW_RIGHT} className=\"virtual-keyboard__button fas fa-arrow-circle-right\" onClick={handleOnClick} />\n        </div>\n    </StyledVirtualKeyboard>\n);\n\nVirtualKeyboard.propTypes = {\n    handleOnClick: PropTypes.func,\n};\n\nVirtualKeyboard.propTypes = {\n    handleOnClick: () => {},\n};\n\nexport default VirtualKeyboard;\n","import styled, { keyframes } from 'styled-components';\nimport {\n    GAME_WIDTH,\n    GAME_WRAPPER_SIZE,\n} from './constants';\n\nconst pulse = keyframes`\n    0% {\n        -moz-box-shadow: 0 0 0 0 red;\n        box-shadow: 0 0 0 0 red;\n    }\n    70% {\n        -moz-box-shadow: 0 0 0 20px rgba(204,169,44, 0);\n        box-shadow: 0 0 0 20px rgba(204,169,44, 0);\n    }\n    100% {\n        -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n        box-shadow: 0 0 0 0 rgba(204,169,44, 0);\n    }\n`;\n\nexport const StyledSnakeGame = styled.div`\n    position: relative;\n    margin-top: 30px;\n    .snake-game__map-wrapper {\n        width: ${GAME_WRAPPER_SIZE}px;\n        height: ${GAME_WRAPPER_SIZE}px;\n        @media only screen and (max-width: 600px) {\n            width: calc(100vw - 20px);\n            height: calc(100vw - 20px);\n        }\n        display: grid;\n        grid-template-columns: repeat(${GAME_WIDTH}, 1fr);\n        grid-template-rows: repeat(${GAME_WIDTH}, 1fr);\n        background: #161616;\n    }\n    .snake-game__map-block-item {\n        border: 1px solid black;\n        box-sizing: border-box;\n    }\n    .snake-game__draw-snake-body {\n        background: white;\n        transition: all 0.1s;\n    }\n    .snake-game__draw-snake-food {\n        background: red;\n        border-radius: 100%;\n        animation: ${pulse} 2s infinite;\n    }\n    .snake-game__panel {\n        width: ${GAME_WRAPPER_SIZE}px;\n        height: ${GAME_WRAPPER_SIZE}px;\n        @media only screen and (max-width: 600px) {\n            width: calc(100vw - 20px);\n            height: calc(100vw - 20px);\n        }\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n    }\n    .snake-game__score {\n        color: white;\n        font-weight: 500;\n        font-size: 1.5em;\n        margin: 15px 0px;\n    }\n    .snake-game__start-game-btn {\n        width: 100px;\n        height: 40px;\n        background: black;\n        border: 2px solid white;\n        color: white;\n        border-radius: 20px;\n        font-size: 1.2em;\n        cursor: pointer;\n        outline: none;\n        &:hover {\n            color: black;\n            background: white;\n            transition: all 0.3s;\n        }\n    }\n    .snake-game__pause-game-btn {\n        color: white;\n        border: 1px solid white;\n        border-radius: 8px;\n        text-align: center;\n        line-height: 50px;\n        font-size: 1.5em;\n        letter-spacing: 5px;\n        cursor: pointer;\n        &:hover {\n            color: black;\n            background: white;\n            transition: all 0.3s;\n        }\n    }\n    .snake-game__score-info {\n        color: white;\n        font-weight: 500;\n        font-size: 1.5em;\n    }\n`;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, List } from 'immutable';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport VirtualKeyboard from 'containers/SnakeGame/components/VirtualKeyboard';\nimport {\n    setSnakeMoving,\n    setSnakeDirection,\n    setGameStart,\n    setSnakeSpeedModified,\n} from './actions';\nimport { StyledSnakeGame } from './Styled';\nimport {\n    makeSelectSnake,\n    makeSelectBlocks,\n    makeSelectFood,\n    makeSelectisGameStart,\n    makeSelectScore,\n    makeSelectIsPause,\n    makeSelectIsSpeedModified,\n} from './selectors';\nimport {\n    SPACE,\n} from './constants';\n\nlet gameInterval;\n\nconst updateGameView = (snake, block, food) => {\n    //draw snake head\n    if (snake.getIn(['headPosition', 'x']) === block.get('x') &&\n        snake.getIn(['headPosition', 'y']) === block.get('y')) {\n        return 'snake-game__map-block-item snake-game__draw-snake-body';\n    }\n    const snakeBody = snake.get('body');\n    if (snakeBody.size > 1) {\n        const found = snakeBody.find((bodyPos) => {\n            return bodyPos.get('x') === block.get('x') &&\n                bodyPos.get('y') === block.get('y');\n        });\n        // draw snake body\n        if (found) {\n            return 'snake-game__map-block-item snake-game__draw-snake-body';\n        }\n    }\n    // draw food\n    if (block.get('x') === food.get('x') &&\n        block.get('y') === food.get('y')) {\n        return 'snake-game__draw-snake-food';\n    }\n    return 'snake-game__map-block-item';\n};\n\nclass SnakeGame extends Component {\n    static propTypes = {\n        snake: PropTypes.instanceOf(Map),\n        blocks: PropTypes.instanceOf(List),\n        food: PropTypes.instanceOf(Map),\n        isGameStart: PropTypes.bool,\n        score: PropTypes.number,\n        isPause: PropTypes.bool,\n        isSpeedModified: PropTypes.bool,\n        handleOnSetSnakeMoving: PropTypes.func,\n        handleOnSetSpeedModified: PropTypes.func,\n    }\n    static defaultProps = {\n        snake: Map(),\n        blocks: List(),\n        food: Map(),\n        isGameStart: false,\n        score: 0,\n        isPause: false,\n        isSpeedModified: true,\n        handleOnSetSnakeMoving: () => { },\n        handleOnSetSpeedModified: () => { },\n    }\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleOnKeyDown);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleOnKeyDown);\n        clearInterval(gameInterval);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const {\n            isSpeedModified,\n        } = prevProps;\n        const {\n            snake,\n            isGameStart,\n            isPause,\n            handleOnSetSnakeMoving,\n            handleOnSetSpeedModified,\n        } = this.props;\n        if (isPause) {\n            clearInterval(gameInterval);\n        }\n        if (isSpeedModified) { // to udpate speed\n            handleOnSetSpeedModified(false);\n            clearInterval(gameInterval);\n            gameInterval = setInterval(() => {\n                if (isGameStart && !isPause) {\n                    handleOnSetSnakeMoving()\n                }\n            }, snake.get('speed'));\n        }\n        if (!isGameStart) {\n            clearInterval(gameInterval);\n            handleOnSetSpeedModified(true);\n        }\n    }\n    handleOnKeyDown = (event) => {\n        const {\n            handleOnSetSnakeDirection,\n        } = this.props;\n        handleOnSetSnakeDirection(event.code);\n    }\n    handleOnGameStartClick = () => {\n        const {\n            handleOnSetSnakeMoving,\n            handleOnSetGameStart,\n        } = this.props;\n        handleOnSetGameStart();\n        handleOnSetSnakeMoving();\n    }\n    handleOnVirtualKeyboardClick = (event) => {\n        const {\n            handleOnSetSnakeDirection,\n        } = this.props;\n        const code = event.currentTarget.getAttribute('data-code');\n        handleOnSetSnakeDirection(code);\n    }\n\n    render() {\n        const {\n            snake,\n            blocks,\n            food,\n            isGameStart,\n            score,\n            isPause,\n        } = this.props;\n        return (\n            <StyledSnakeGame onKeyDown={this.handleOnKeyDown}>\n                <div className=\"snake-game__score-info\">Score: {score}</div>\n                {\n                    !isGameStart &&\n                    <div className=\"snake-game__panel\">\n                        <div className=\"snake-game__score\">\n                            <span>Score: </span>\n                            <span>{score}</span>\n                        </div>\n                        <button\n                            className=\"snake-game__start-game-btn\"\n                            onClick={this.handleOnGameStartClick}\n                        >\n                            Start\n                        </button>\n                    </div>\n                }\n                <div className=\"snake-game__map-wrapper\">\n                    {\n                        blocks.map((rows) => (\n                            rows.map((block) => (\n                                <div\n                                    key={block.get('id')}\n                                    className={updateGameView(snake, block, food)}\n                                >\n                                </div>\n                            ))\n                        ))\n                    }\n                </div>\n                <div data-code={SPACE} onClick={this.handleOnVirtualKeyboardClick} className=\"snake-game__pause-game-btn\">\n                    {\n                        isPause ? '繼續' : '暫停'\n                    }\n                </div>\n                <VirtualKeyboard handleOnClick={this.handleOnVirtualKeyboardClick} />\n            </StyledSnakeGame>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    snake: makeSelectSnake(),\n    blocks: makeSelectBlocks(),\n    food: makeSelectFood(),\n    isGameStart: makeSelectisGameStart(),\n    score: makeSelectScore(),\n    isPause: makeSelectIsPause(),\n    isSpeedModified: makeSelectIsSpeedModified(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleOnSetSnakeMoving: () => dispatch(setSnakeMoving()),\n    handleOnSetSnakeDirection: (directionType) => dispatch(setSnakeDirection(directionType)),\n    handleOnSetGameStart: () => dispatch(setGameStart()),\n    handleOnSetSpeedModified: (payload) => dispatch(setSnakeSpeedModified(payload)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SnakeGame);\n","import { createSelector } from 'reselect';\n\nconst selectSnakeGame = state => state.get('snakeGame');\n\nconst makeSelectSnake = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('snake'),\n    );\n\nconst makeSelectBlocks = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('blocks'),\n    );\n\nconst makeSelectFood = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('food'),\n    );\n\nconst makeSelectisGameStart = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('isGameStart'),\n    );\n\nconst makeSelectScore = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('score'),\n    );\n\nconst makeSelectIsPause = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('isPause'),\n    );\n\nconst makeSelectIsSpeedModified = () =>\n    createSelector(selectSnakeGame, tictactoeState =>\n        tictactoeState.get('isSpeedModified'),\n    );\n\nexport {\n    makeSelectSnake,\n    makeSelectBlocks,\n    makeSelectFood,\n    makeSelectisGameStart,\n    makeSelectScore,\n    makeSelectIsPause,\n    makeSelectIsSpeedModified,\n};\n","import {\n    SET_SNAKE_MOVING,\n    SET_SNAKE_DIRECTION,\n    SET_SNAKE_GAME_START,\n    SET_SNAKE_SPEED_MODIFIED,\n} from './constants';\n\nexport const setSnakeMoving = () => ({\n    type: SET_SNAKE_MOVING,\n});\n\nexport const setSnakeDirection = (directionType) => ({\n    type: SET_SNAKE_DIRECTION,\n    payload: directionType,\n});\n\nexport const setGameStart = () => ({\n    type: SET_SNAKE_GAME_START,\n});\n\nexport const setSnakeSpeedModified = (payload) => ({\n    type: SET_SNAKE_SPEED_MODIFIED,\n    payload,\n});\n","import React, { Component } from 'react';\nimport SnakeGame from 'containers/SnakeGame';\nimport GithubCorner from 'react-github-corner';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SnakeGame />\n        <GithubCorner\n          size={60}\n          octoColor={'black'}\n          bannerColor={'white'}\n          href=\"https://timingjl.github.io/Snake\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { fromJS } from 'immutable';\nimport {\n    INIT,\n} from './constants';\nimport _ from 'lodash';\nimport {\n    GAME_WIDTH,\n    SET_SNAKE_MOVING,\n    SET_SNAKE_DIRECTION,\n    SET_SNAKE_GAME_START,\n    SET_SNAKE_SPEED_MODIFIED,\n    SNAKE_LIMITED_SPEED,\n    SNAKE_INITIAL_SPEED,\n    SNAKE_DELTA_SPEED,\n\n    ARROW_UP,\n    ARROW_DOWN,\n    ARROW_LEFT,\n    ARROW_RIGHT,\n} from './constants';\n\nconst direction = {};\ndirection[ARROW_UP] = { x: 0, y: -1 };\ndirection[ARROW_DOWN] = { x: 0, y: 1 };\ndirection[ARROW_LEFT] = { x: -1, y: 0 };\ndirection[ARROW_RIGHT] = { x: 1, y: 0 };\n\nconst createFood = () => ({\n    x: Math.floor(Math.random() * GAME_WIDTH),\n    y: Math.floor(Math.random() * GAME_WIDTH),\n});\n\nconst defaultSnake = {\n    headPosition: {\n        x: 0,\n        y: 0,\n    },\n    body: [],\n    maxLength: 2,\n    direction: {\n        x: 1,\n        y: 0,\n    },\n    speed: SNAKE_INITIAL_SPEED,\n};\n\nconst defaultBlocks = _.range(0, GAME_WIDTH).map((value, indexY) => (\n    _.range(0, GAME_WIDTH).map((value, indexX) => (\n        {\n            id: indexX + GAME_WIDTH * indexY,\n            x: indexX,\n            y: indexY,\n        }\n    ))\n));\n\nconst initialState = fromJS({\n    blocks: defaultBlocks,\n    snake: defaultSnake,\n    food: createFood(),\n    isGameStart: false,\n    isPause: false,\n    isSpeedModified: true,\n    score: 0,\n});\n\nfunction snakeGameReducer(state = initialState, action) {\n    switch (action.type) {\n        case INIT: {\n            return initialState;\n        }\n\n        case SET_SNAKE_MOVING: {\n            const direction = state.getIn(['snake', 'direction']);\n            const headPositionX = state.getIn(['snake', 'headPosition', 'x']);\n            const headPositionY = state.getIn(['snake', 'headPosition', 'y']);\n            const maxLength = state.getIn(['snake', 'maxLength']);\n            const snakeBody = state.getIn(['snake', 'body']);\n            const food = state.get('food');\n            const isEatFood = food.get('x') === headPositionX && food.get('y') === headPositionY;\n            const updatedPositionX = headPositionX + direction.get('x');\n            const updatedPositionY = headPositionY + direction.get('y');\n            const eatSelf = snakeBody.find((body) => (\n                body.get('x') === updatedPositionX && body.get('y') === updatedPositionY\n            ));\n            if (state.get('isPause') || !state.get('isGameStart')) {\n                return state;\n            }\n            if (eatSelf) {\n                return state.set('isGameStart', false);\n            }\n            return state\n                // update snake body\n                .updateIn(['snake', 'body'], (body) => {\n                    let updatedBody = body.push(fromJS({\n                        x: headPositionX,\n                        y: headPositionY,\n                    }));\n                    if (updatedBody.size > maxLength) {\n                        updatedBody = updatedBody.shift();\n                    }\n                    return fromJS(updatedBody);\n                })\n                // update snake head position\n                .updateIn(['snake', 'headPosition'], (headPosition) =>\n                    headPosition\n                        .set('x', updatePosition(headPosition.get('x') + direction.get('x')))\n                        .set('y', updatePosition(headPosition.get('y') + direction.get('y')))\n                )\n                // create new food\n                .updateIn(['food'], (food) => {\n                    if (isEatFood) {\n                        return fromJS(createFood());\n                    }\n                    return food;\n                })\n                // update snake maxLength\n                .updateIn(['snake', 'maxLength'], (maxLength) => {\n                    if (isEatFood) {\n                        return maxLength + 1;\n                    }\n                    return maxLength;\n                })\n                // update snake speed after eating food\n                .updateIn(['snake', 'speed'], (speed) => {\n                    if (isEatFood) {\n                        const updatedSpeed = (speed - SNAKE_DELTA_SPEED) > SNAKE_LIMITED_SPEED ? (speed - SNAKE_DELTA_SPEED) : SNAKE_LIMITED_SPEED;\n                        return updatedSpeed;\n                    }\n                    return speed;\n                })\n                // update score\n                .updateIn(['score'], (score) => {\n                    if (isEatFood) {\n                        return score + 1;\n                    }\n                    return score;\n                })\n                // update isSpeedModified\n                .updateIn(['isSpeedModified'], (isSpeedModified) => {\n                    if (isEatFood) {\n                        return true;\n                    }\n                    return false;\n                });\n        }\n\n        case SET_SNAKE_SPEED_MODIFIED: {\n            return state.set('isSpeedModified', action.payload);\n        }\n\n        case SET_SNAKE_DIRECTION: {\n            if (!state.get('isGameStart')) {\n                return state;\n            }\n            let isPause = state.get('isPause');\n            let isSpeedModified = state.get('isSpeedModified');\n            if (action.payload === 'Space') {\n                isPause = !state.get('isPause');\n                isSpeedModified = isPause;\n            }\n            if (!direction[action.payload] && !(action.payload === 'Space')) {\n                return state;\n            }\n\n            return state.updateIn(['snake', 'direction'], (dir) => {\n                if (action.payload === 'Space' || isPause) {\n                    return dir;\n                }\n                if (dir.get('x') * -1 === direction[action.payload].x &&\n                    dir.get('y') * -1 === direction[action.payload].y) {\n                    return dir;\n                }\n                return fromJS(direction[action.payload]);\n            })\n            .set('isPause', isPause)\n            .set('isSpeedModified', isSpeedModified);\n        }\n\n        case SET_SNAKE_GAME_START: {\n            return initialState\n                .set('isGameStart', true);\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nconst updatePosition = (position) => {\n    if (position > GAME_WIDTH - 1) {\n        return 0;\n    } else if (position < 0) {\n        return GAME_WIDTH;\n    }\n    return position;\n}\n\nexport default snakeGameReducer;\n","import { Observable } from 'rxjs/Rx';\nimport {\n    INIT,\n} from './constants';\n\nconst setInit = (action$, store) =>\n    action$.ofType(INIT).switchMap(() => {\n        return Observable.empty();\n    });\n\nexport default [\n    setInit,\n];\n","import snakeGameEpics from 'containers/SnakeGame/epics';\n\nexport default [...snakeGameEpics];\n","import configureStore from './configureStore';\n\nconst store = configureStore();\n\nexport default store;\n","import { fromJS } from 'immutable';\nimport {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport createReducer from 'store/reducers';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport initialEpics from './epics';\n\nexport default function configureStore(initialState = {}, history) {\n    // Create root epic that accepts async injection\n    const epic$ = new BehaviorSubject(combineEpics(...initialEpics));\n    const rootEpic = (action$, store, deps) =>\n        epic$.mergeMap(epic =>\n            epic(action$, store, deps).catch((err, source$) => {\n                setTimeout(() => {\n                    throw err;\n                }, 0);\n                return source$;\n            }),\n        );\n    const epicMiddleware = createEpicMiddleware();\n\n    // Create the store with two middlewares\n    // 1. sagaMiddleware: Makes redux-sagas work\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n    const middlewares = [\n        epicMiddleware,\n    ];\n\n    const enhancers = [applyMiddleware(...middlewares)];\n\n    // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n    /* eslint-disable no-underscore-dangle */\n    const composeEnhancers =\n        process.env.NODE_ENV !== 'production' &&\n            typeof window === 'object' &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n                // Prevent recomputing reducers for `replaceReducer`\n                shouldHotReload: false,\n            })\n            : compose;\n\n    const store = createStore(\n        createReducer(),\n        fromJS(initialState),\n        composeEnhancers(...enhancers)\n    );\n\n    epicMiddleware.run(rootEpic);\n\n    return store;\n}\n","import { combineReducers } from 'redux-immutable';\nimport snakeGame from 'containers/SnakeGame/reducer';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(injectedReducers) {\n    return combineReducers({\n        snakeGame: snakeGame,\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from 'store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}